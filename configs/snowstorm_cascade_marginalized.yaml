---
##############
# Config for single cascade events
#
# Detailed information on the parameters are given in the SetupManager
# class located in egenerator.settings.setup_manager.py.
##############

# Provide a unique name for the model
unique_name: 'snowstorm_cascade_marginalized'


#------------------
# Training settings
#------------------
training_settings: {
    'optimizer_name': 'Adam',
    'optimizer_settings': {
        'learning_rate': 0.001,
    },
    'l1_regularization': 0.,
    'l2_regularization': 0.,
    'clip_gradients_value': ,
    'remove_nan_gradients': False,

    'validation_frequency': 100,
    'evaluation_frequency': 100,
    'save_frequency': 500,

    # Number of training iterations to train the model for
    'num_training_iterations': 1000000,
}

#----------------.-------
# Reconstruction settings
#------------------------
reconstruction_settings: {
    'reco_output_file': '../data/reconstruction/{unique_name}/reconstruction_snowstorm_cascade_marginalized.hdf5',

    # define which tensor to use as parameter_tensor
    'parameter_tensor_name': 'x_parameters',
    # define seed (to seed from MC truth choose: 'x_parameters')
    'seed': 'x_parameters', # 'MonopodFit4_PartialExclusion',
    # these are only relevant for the SeedLoaderMiscModule. This specifies
    # from which column names in the data table the parameters will be loaded
    'seed_parameter_names': ['x', 'y', 'z', 'zenith', 'azimuth',
                             'energy', 'time'],
    'seed_missing_value': ,
    'seed_float_precision': 'float32',

    # choose the otpimizer iterface:
    #   'scipy' or 'tfp' (tensorflow_probability)
    'reco_optimizer_interface': 'scipy',

    'scipy_optimizer_settings': {
        # 'method': 'L-BFGS-B',
        'method': 'BFGS',
        'options': {
            # 'ftol': !!float 1e-7,
        }
    },

    'tf_optimizer_settings': {
        'method': 'bfgs_minimize',
        'x_tolerance': 0.001,
    },

    # Perform minimization in transformed and normalized parameter space
    # if True. This is usually desired as it may facilitate minimization.
    'minimize_in_trafo_space': True,

    # Specify which parameters to fit.
    # If True, the parameter is minimized doing reconstruction, otherwise it
    # is held constant.
    # Set default value which will apply to all parameters, except if stated
    # otherwise in the 'minimize_parameter_dict'
    'minimize_parameter_default_value': True,
    # Settings defined here overwrite the default value
    # Entries must have the form: {parameter_name: value}
    'minimize_parameter_dict': {

    },

}

#-----------------------
# Model Manager settings
#-----------------------

# Settings for model manager class
model_manager_settings: {

    # The loss module class to use
    'model_manager_class': 'egenerator.manager.source.SourceManager',

    # restore model if True, otherwise start from scratch
    'restore_model' : True,

    # These settings are used to configure the model manager and may not change
    config: {

        # Path to where the manager will be saved to and loaded from
        'manager_dir': '../data/training/{unique_name}/manager',
    },
}

#-----------------------
# Data Iterator settings
#-----------------------

# These settings describe the data iterators
data_iterator_settings: {

    # The training data iterator
    'training': {
        'batch_size': 32,
        'num_splits': ,
        'file_capacity': 2,
        'batch_capacity': 20,
        'num_jobs': 10,
        'num_add_files': 2,
        'num_repetitions': 3,
        'input_data': [
            # # mono-energetic cascades at 10 TeV [uniform spread around vertex time, vertex time]
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10000/cgenerator_10000_step_3_pass2_get_pulses_IC86_pulses/*/00000-00999/*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10000/cgenerator_10000_step_3_pass2_get_pulses_IC86_pulses/*/01000-01999/*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10000/cgenerator_10000_step_3_pass2_get_pulses_IC86_pulses/*/02000-02999/*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10000/cgenerator_10000_step_3_pass2_get_pulses_IC86_pulses/*/03000-03999/*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10000/cgenerator_10000_step_3_pass2_get_pulses_IC86_pulses/*/04000-04999/*.hdf5',

            # # 1e2 - 1e3 GeV [uniform spread around vertex time, vertex time]
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10001/cgenerator_10001_step_3_pass2_get_pulses_IC86_pulses/*/00000-00999/*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10001/cgenerator_10001_step_3_pass2_get_pulses_IC86_pulses/*/01000-01999/*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10001/cgenerator_10001_step_3_pass2_get_pulses_IC86_pulses/*/02000-02999/*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10001/cgenerator_10001_step_3_pass2_get_pulses_IC86_pulses/*/03000-03999/*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10001/cgenerator_10001_step_3_pass2_get_pulses_IC86_pulses/*/04000-04999/*.hdf5',

            # # 1e3 - 1e5 GeV [uniform spread around vertex time, vertex time]
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10002/cgenerator_10002_step_3_pass2_get_pulses_IC86_pulses/*/00000-00999/*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10002/cgenerator_10002_step_3_pass2_get_pulses_IC86_pulses/*/01000-01999/*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10002/cgenerator_10002_step_3_pass2_get_pulses_IC86_pulses/*/02000-02999/*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10002/cgenerator_10002_step_3_pass2_get_pulses_IC86_pulses/*/03000-03999/*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10002/cgenerator_10002_step_3_pass2_get_pulses_IC86_pulses/*/04000-04999/*.hdf5',

            # # 1e5 - 1e6 GeV [uniform spread around vertex time, vertex time]
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10003/cgenerator_10003_step_3_pass2_get_pulses_IC86_pulses/*/00000-00999/*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10003/cgenerator_10003_step_3_pass2_get_pulses_IC86_pulses/*/01000-01999/*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10003/cgenerator_10003_step_3_pass2_get_pulses_IC86_pulses/*/02000-02999/*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10003/cgenerator_10003_step_3_pass2_get_pulses_IC86_pulses/*/03000-03999/*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/10003/cgenerator_10003_step_3_pass2_get_pulses_IC86_pulses/*/04000-04999/*.hdf5',

            # Snowstorm datasets
            # 1e2 - 1e4 GeV [uniform spread around vertex time, vertex time]
            '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/30012/egenerator_30012_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',

            '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/30002/egenerator_30002_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',

            # 1e4 - 1e6 GeV [uniform spread around vertex time, vertex time]
            '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/30013/egenerator_30013_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',

            '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/30003/egenerator_30003_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',

             # 1e6 - 1e8 GeV [uniform spread around vertex time, vertex time]
            '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/30014/egenerator_30014_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',

            '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/30004/egenerator_30004_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',

        ],
    },

    # The trafo data iterator
    'trafo': {
        'batch_size': 32,
        'num_splits': ,
        'file_capacity': 1,
        'batch_capacity': 2,
        'num_jobs': 20,
        'num_add_files': 1,
        'num_repetitions': 1,
        'pick_random_files_forever': False,
        'input_data': [
            '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/30002/egenerator_30002_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',
            '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/30003/egenerator_30003_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',
            '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/30004/egenerator_30004_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',
        ],
    },

    # The validation data iterator
    'validation': {
        'batch_size': 32,
        'num_splits': ,
        'file_capacity': 1,
        'batch_capacity': 3,
        'num_jobs': 1,
        'num_add_files': 0,
        'num_repetitions': 1,
        'pick_random_files_forever': True,
        'input_data': [
            # 1e2 - 1e4 GeV [uniform spread around vertex time, vertex time]
            '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/30002/egenerator_30002_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/01000-01999/*.hdf5',

            # 1e4 - 1e6 GeV [uniform spread around vertex time, vertex time]
            '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/30003/egenerator_30003_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/01000-01999/*.hdf5',

             # 1e6 - 1e8 GeV [uniform spread around vertex time, vertex time]
            '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/30004/egenerator_30004_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/01000-01999/*.hdf5',
        ],
    },

    # The test data iterator
    'test': {
        'batch_size': 1,
        'num_splits': ,
        'file_capacity': 1,
        'batch_capacity': 3,
        'num_jobs': 1,
        'num_add_files': 0,
        'num_repetitions': 1,
        'sample_randomly': False,
        'pick_random_files_forever': False,
        'input_data': [
            # # 1e2 - 1e4 GeV [uniform spread around vertex time, vertex time]
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/30012/egenerator_30012_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/01000-01999/*100*.hdf5',
            # 1e4 - 1e6 GeV [uniform spread around vertex time, vertex time]
            '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/30013/egenerator_30013_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/01000-01999/*100*.hdf5',
            # 1e6 - 1e8 GeV [uniform spread around vertex time, vertex time]
            '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/30014/egenerator_30014_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/01000-01999/*100*.hdf5',

            # # NuGen -- L5MonopodFit4 vertex
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/NuGen/NuGen/NuE/low_energy/IC86_2013/l5_lea/IC86_pulses/cascade_vertex/5/DNN_l5_lea_000040*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/NuGen/NuGen/NuE/medium_energy/IC86_2013/l5_lea/IC86_pulses/cascade_vertex/27/DNN_l5_lea_0002600*.hdf5',

            # # Spice Lea Coverage Test
            # '/net/big-tank/POOL/users/mhuennefeld/data/cgenerator/99003/egenerator_99003_step_3_pass2_get_pulses_IC86_pulses/trigger_time/00000-00999/*000.hdf5',
        ],
    },
}

#---------------------
# Loss module settings
#---------------------

# Settings for the loss module class
loss_module_settings: {

    # The loss module class to use
    'loss_module': 'egenerator.loss.default.DefaultLossModule',

    config: {
        # the float precision to use
        'float_precision': 'float32',

        # choose the loss function to use
        'loss_function_name': 'unbinned_charge_quantile_pdf',
    },
}

#---------------------------
# Evaluation module settings
#---------------------------

# Settings for the evaluation module class
evaluation_module_settings: {

    # The loss module class to use
    'evaluation_module':,
    config: {
    },
}

#-----------------------------
# Data Transformation settings
#-----------------------------
data_trafo_settings: {
    'float_precision': 'float64',
    'norm_constant': !!float 1e-6,
    'num_batches': 5000,
    'model_dir': '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/trafo_models/trafo_model_snowstorm_cascade_marginalized_pulse_data',
}

#----------------------
# Data Handler settings
#----------------------

# Settings for the data handler class
data_handler_settings: {

    # The data handler class to use
    'data_handler': 'modular.ModuleDataHandler',

    # -------------------
    # DataModule Settings
    # -------------------
    # which data module to use
    'data_module': 'pulse_data.PulseDataModule',

    # settings for the data module
    'data_settings':{
        'pulse_key': 'InIceDSTPulses',
        'dom_exclusions_key': 'BadDomsList',
        'time_exclusions_key': ,
        'float_precision': 'float32',
        'add_charge_quantiles': True,
    },

    # --------------------
    # LabelModule Settings
    # --------------------
    # which label module to use
    'label_module': 'cascades.CascadeGeneratorLabelModule',

    # settings for the label module
    'label_settings':{
        'shift_cascade_vertex': True,
        # logarithm on labels (x, y, z, zenith, azimuth, energy, time)?
        'trafo_log': [False, False, False, False, False, True, False],
        'label_key': 'LabelsDeepLearning',
        'float_precision': 'float32',
    },

    # ---------------------
    # WeightModule Settings
    # ---------------------
    # which weight module to use
    'weight_module': 'dummy.DummyWeightModule',

    # settings for the weight module
    'weight_settings':{},

    # -------------------
    # MiscModule Settings
    # -------------------
    # which misc module to use
    'misc_module': 'dummy.DummyMiscModule',

    # settings for the misc module
    'misc_settings':{},

    # -------------------
    # FilterModule Settings
    # -------------------
    # which filter module to use
    'filter_module': 'dummy.DummyFilterModule',

    # settings for the filter module
    'filter_settings':{},
}

#---------------
# Model settings
#---------------

# Settings for the neural network model class
model_settings: {

    # The loss module class to use
    'model_class': 'egenerator.model.source.cascade.charge_quantiles.ChargeQuantileCascadeModel',

    config: {
        'keep_prob':,
        'add_opening_angle': True,
        'add_dom_coordinates': False,
        'num_local_vars': 0,
        'scale_charge': True,
        'scale_charge_by_relative_dom_efficiency': True,
        'scale_charge_by_global_dom_efficiency': False,
        'estimate_charge_distribution': True,
        'num_latent_models': 2,
        'add_predicted_charge_to_latend_vars': True,

        # First convolutions
        'filter_size_list' : [[1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1]],
        'num_filters_list' : [20, 500, 500, 500, 23],
        'method_list' : ['locally_connected',
                         'convolution', 'convolution', 'convolution',
                         'convolution',
                         ],
        'use_dropout_list' : False,
        'activation_list' : ['elu', 'elu', 'elu', 'elu', ''],
        'use_batch_norm_list' : False,
        'use_residual_list' : True,

        # Fully connected layers for p(t| q_i, D_i) calculation
        'fc_num_filters_list' : [100, 100, 8],
        'fc_use_dropout_list' : False,
        'fc_activation_list' : ['elu', 'elu', ''],
        'fc_use_batch_norm_list' : False,
        'fc_use_residual_list' : True,
    },
}

#----------------------
...
