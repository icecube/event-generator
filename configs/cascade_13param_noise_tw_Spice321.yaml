---
##############
# Config for single cascade events
#
# Detailed information on the parameters are given in the SetupManager
# class located in egenerator.settings.setup_manager.py.
##############

# Provide a unique name for the model
unique_name: 'cascade_13param_noise_tw_Spice321'

#------------------
# Training settings
#------------------
training_settings: {
    'optimizer_name': 'Adam',
    'optimizer_settings': {
        # 'amsgrad': True,
        'learning_rate': {
            'full_class_string': 'egenerator.utils.learning_rate.MultiLearningRateScheduler',
            'settings':{
                'boundaries': [10000, 500000],
                'scheduler_settings': [
                    {
                    'full_class_string': 'tensorflow.keras.optimizers.schedules.PolynomialDecay',
                    'settings': {
                        'initial_learning_rate': 0.01,
                        'end_learning_rate': 0.001,
                        'decay_steps': 10000,
                        },
                    },
                    {
                    'full_class_string': 'tensorflow.keras.optimizers.schedules.PolynomialDecay',
                    'settings': {
                        'initial_learning_rate': 0.001,
                        'end_learning_rate': 0.001,
                        'decay_steps': 490000,
                        },
                    },
                    {
                    'full_class_string': 'tensorflow.keras.optimizers.schedules.PolynomialDecay',
                    'settings': {
                        'initial_learning_rate': 0.001,
                        'end_learning_rate': 0.000001,
                        'decay_steps': 500000,
                        'power': 2,
                        },
                    },
                ]
            },
        },
    },
    'l1_regularization': 0.,
    'l2_regularization': 0.,
    'clip_gradients_value': ,
    'remove_nan_gradients': False,

    'validation_frequency': 100,
    'evaluation_frequency': 100,
    'save_frequency': 500,

    # Number of training iterations to train the model for
    'num_training_iterations': 1000000,

    # Additional keywords to the loss module used for training
    'additional_loss_module_kwargs': {
        'normalize_by_total_charge': False,
    },
}

#----------------.-------
# Reconstruction settings
#------------------------
reconstruction_settings: {
    'reco_output_file': '../data/reconstruction/{unique_name}/reconstruction_{unique_name}.hdf5',

    # Define which modules to run
    'calculate_covariance_matrix': False,
    'calculate_goodness_of_fit': False,
    'estimate_angular_uncertainty': False,
    'run_mcmc': False,
    'make_1d_llh_scans': False,

    # define which tensor to use as parameter_tensor (default: x_parameters)
    'parameter_tensor_name': 'x_parameters',
    # define seed (to seed from MC truth choose: 'x_parameters')
    'seed': 'MonopodFit4_PartialExclusion',
    # these are only relevant for the SeedLoaderMiscModule. This specifies
    # from which column names in the data table the parameters will be loaded
    'seed_parameter_names': ['x', 'y', 'z', 'zenith', 'azimuth',
                             'energy', 'time',
                             'Absorption', 'AnisotropyScale', 'DOMEfficiency',
                             'HoleIceForward_Unified_00',
                             'HoleIceForward_Unified_01',
                             'Scattering',
                         ],
    'seed_missing_value': 1.,
    'seed_missing_value_dict': {
        'Absorption': 1.,
        'AnisotropyScale': 1.,
        'DOMEfficiency': 1.,
        'HoleIceForward_Unified_00': 0.,
        'HoleIceForward_Unified_01': 0.,
        'Scattering': 1.,
    },
    'seed_float_precision': 'float64',

    # choose the otpimizer iterface:
    #   'scipy' or 'tfp' (tensorflow_probability)
    'reco_optimizer_interface': 'scipy',

    'scipy_optimizer_settings': {
        # 'method': 'L-BFGS-B',
        'method': 'BFGS',
        'options': {
            # 'ftol': !!float 1e-7,
        }
    },

    'tf_optimizer_settings': {
        'method': 'bfgs_minimize',
        'x_tolerance': 0.001,
    },

    # Perform minimization in transformed and normalized parameter space
    # if True. This is usually desired as it may facilitate minimization.
    'minimize_in_trafo_space': True,

    # Specify which parameters to fit.
    # If True, the parameter is minimized doing reconstruction, otherwise it
    # is held constant.
    # Set default value which will apply to all parameters, except if stated
    # otherwise in the 'minimize_parameter_dict'
    'minimize_parameter_default_value': True,
    # Settings defined here overwrite the default value
    # Entries must have the form: {parameter_name: value}
    'minimize_parameter_dict': {

    },
}

#-----------------------
# Model Manager settings
#-----------------------

# Settings for model manager class
model_manager_settings: {

    # The loss module class to use
    'model_manager_class': 'egenerator.manager.source.SourceManager',

    # restore model if True, otherwise start from scratch
    'restore_model' : True,

    # These settings are used to configure the model manager and may not change
    config: {

        # Path to where the manager will be saved to and loaded from
        'manager_dir': '../data/training/{unique_name}/manager',

        # Define which model parameters to use for the I3Particle
        # [x, y, z, zenith, azimuth, energy, time]
        'I3ParticleMapping': {
            'x': 'cascade_x',
            'y': 'cascade_y',
            'z': 'cascade_z',
            'zenith': 'cascade_zenith',
            'azimuth': 'cascade_azimuth',
            'energy': 'cascade_energy',
            'time': 'cascade_time',
        },
    },
}

#-----------------------
# Data Iterator settings
#-----------------------

# These settings describe the data iterators
data_iterator_settings: {

    # The training data iterator
    'training': {
        'batch_size': 32,
        'num_splits': ,
        'file_capacity': 10,
        'batch_capacity': 500,
        'dataset_capacity': 500,
        'num_jobs': 10,
        'num_add_files': 20,
        'num_repetitions': 3,
        'input_data': [
            # Snowstorm EM datasets
            # 1e2 - 1e4 GeV [uniform spread around vertex time, vertex time]
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30032/egenerator_30032_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',

            # 1e4 - 1e6 GeV [uniform spread around vertex time, vertex time]
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30033/egenerator_30033_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/0*000-0*999/*.hdf5',
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30036/egenerator_30036_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',

            # 1e6 - 1e8 GeV [uniform spread around vertex time, vertex time]
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30034/egenerator_30034_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/0*000-0*999/*.hdf5',

            # SnowStorm Mixed EM/Hadronic cascades
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30240/egenerator_30240_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30241/egenerator_30241_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30242/egenerator_30242_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30243/egenerator_30243_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30244/egenerator_30244_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30245/egenerator_30245_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30246/egenerator_30246_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30247/egenerator_30247_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',

        ],
    },

    # The trafo data iterator
    'trafo': {
        'batch_size': 32,
        'num_splits': ,
        'file_capacity': 1,
        'batch_capacity': 2,
        'num_jobs': 20,
        'num_add_files': 1,
        'num_repetitions': 1,
        'pick_random_files_forever': False,
        'input_data': [
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30032/egenerator_30032_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30033/egenerator_30033_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30034/egenerator_30034_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*.hdf5',
        ],
    },

    # The validation data iterator
    'validation': {
        'batch_size': 32,
        'num_splits': ,
        'file_capacity': 5,
        'batch_capacity': 10,
        'dataset_capacity': 10,
        'num_jobs': 2,
        'num_add_files': 5,
        'num_repetitions': 1,
        'pick_random_files_forever': True,
        'input_data': [
            # 1e2 - 1e4 GeV [uniform spread around vertex time, vertex time]
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30240/egenerator_30240_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/01000-01999/*.hdf5',

            # 1e4 - 1e6 GeV [uniform spread around vertex time, vertex time]
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30241/egenerator_30241_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/01000-01999/*.hdf5',

             # 1e6 - 1e8 GeV [uniform spread around vertex time, vertex time]
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30242/egenerator_30242_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/01000-01999/*.hdf5',
        ],
    },

    # The test data iterator
    'test': {
        'batch_size': 1,
        'num_splits': ,
        'file_capacity': 1,
        'batch_capacity': 3,
        'num_jobs': 1,
        'num_add_files': 0,
        'num_repetitions': 1,
        'sample_randomly': False,
        'pick_random_files_forever': False,
        'input_data': [
            # # 1e2 - 1e4 GeV [uniform spread around vertex time, vertex time]
            # '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30240/egenerator_30240_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/01000-01999/*.hdf5',
            # # 1e4 - 1e6 GeV [uniform spread around vertex time, vertex time]
            # '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30241/egenerator_30241_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/01000-01999/*1000*.hdf5',
            # # 1e6 - 1e8 GeV [uniform spread around vertex time, vertex time]
            # '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/30242/egenerator_30242_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/01000-01999/*1000*.hdf5',

            # # NuGen -- L5MonopodFit4 vertex
            # '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/NuGen/NuGen/NuE/low_energy/IC86_2013/l5_lea/IC86_pulses/cascade_vertex/5/DNN_l5_lea_000040*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/NuGen/NuGen/NuE/medium_energy/IC86_2013/l5_lea/IC86_pulses/cascade_vertex/27/DNN_l5_lea_0002600*.hdf5',

            # # Egenerator NuGen SpiceLea Test Data
            # '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/egenerator_test_data/NuGen/NuE/low_energy/IC86_2013/l5_lea/IC86_pulses/trigger_time/5/egenerator_NuE_low_energy_IC86_2013_l5_lea_run_000040*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/egenerator_test_data/NuGen/NuE/medium_energy/IC86_2013/l5_lea/IC86_pulses/trigger_time/27/egenerator_NuE_medium_energy_IC86_2013_l5_lea_run_0002600*.hdf5',

            # # Egenerator NuGen Spice3.2 Test Data
            # '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/egenerator_test_data/NuGen_new/NuE/low_energy/IC86_flasher_p1=0.3_p2=0.0/l3/IC86_pulses/trigger_time/5/egenerator_*_run_0000400*.hdf5',
            # '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/egenerator_test_data/NuGen_new/NuE/medium_energy/IC86_flasher_p1=0.3_p2=0.0/l3/IC86_pulses/trigger_time/5/egenerator_*_run_00004000.hdf5',

            # MESE NuGen NuE l5 Benchmark Datasets
            # Spice3.2.1 variable
            # '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/99900/egenerator_99900_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*_0000000*.hdf5',
            # Spice3.2.1 const
            # '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/99901/egenerator_99901_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*_0000000*.hdf5',
            # SpiceLea variable
            # '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/99902/egenerator_99902_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*_0000000*.hdf5',
            # SpiceLea const
            # '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/99903/egenerator_99903_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*_0000000*.hdf5',
            # Spice3.2.1 variable no fourier
            '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/training_data/datasets/99911/egenerator_99911_step_3_pass2_get_pulses_py3_v4_1_0_IC86_pulses/*/00000-00999/*_0000000*.hdf5',
        ],
    },
}

#---------------------
# Loss module settings
#---------------------

# Settings for the loss module class
loss_module_settings: [
    {
        # The loss module class to use
        'loss_module': 'egenerator.loss.default.DefaultLossModule',

        config: {
            # the float precision to use
            'float_precision': 'float64',
            # Add normalization terms to llh if True
            'add_normalization_term': True,
            # choose the loss function to use
            'loss_function_name': 'unbinned_pulse_time_llh',
        },
    },
    {
        # The loss module class to use
        'loss_module': 'egenerator.loss.default.DefaultLossModule',

        config: {
            # the float precision to use
            'float_precision': 'float64',
            # Add normalization terms to llh if True
            'add_normalization_term': True,
            # choose the loss function to use
            'loss_function_name': 'negative_binomial_charge_pdf',
        },
    },
    {
        # The loss module class to use
        'loss_module': 'egenerator.loss.snowstorm.SnowstormPriorLossModule',
        config: {

            # define uniform priors
            'uniform_parameters': {
                'cascade_Absorption': [0.9, 1.1],
                'cascade_AnisotropyScale': [0., 2.0],
                'cascade_DOMEfficiency': [0.9, 1.1],
                'cascade_Scattering': [0.9, 1.1],
                'cascade_HoleIceForward_Unified_00': [-1.0, 1.0], #[-0.65, 0.60],
                'cascade_HoleIceForward_Unified_01': [-0.2, 0.2], #[-0.08, 0.08],
            },

            # define fourier component sigmas
            'sigmas': [],
        },
    },
]

#---------------------------
# Evaluation module settings
#---------------------------

# Settings for the evaluation module class
evaluation_module_settings: {

    # The loss module class to use
    'evaluation_module':,
    config: {
    },
}

#-----------------------------
# Data Transformation settings
#-----------------------------
data_trafo_settings: {
    'float_precision': 'float64',
    'norm_constant': !!float 1e-6,
    'num_batches': 5000,
    'model_dir': '/net/big-tank/POOL/users/mhuennefeld/data/egenerator/trafo_models/trafo_model_cascade_13param_noise_tw_Spice321',
}

#----------------------
# Data Handler settings
#----------------------

# Settings for the data handler class
data_handler_settings: {

    # The data handler class to use
    'data_handler': 'modular.ModuleDataHandler',

    # -------------------
    # DataModule Settings
    # -------------------
    # which data module to use
    'data_module': 'pulse_data.PulseDataModule',

    # settings for the data module
    'data_settings':{
        'pulse_key': 'InIceDSTPulses_masked',
        'dom_exclusions_key': 'combined_exclusions_DOMs',
        'time_exclusions_key': 'combined_exclusions_TimeWindowsHDF5',
        'float_precision': 'float64',
        'add_charge_quantiles': False,
        'discard_pulses_from_excluded_doms': False,
    },

    # --------------------
    # LabelModule Settings
    # --------------------
    # which label module to use
    'label_module': 'snowstorm_cascades.SnowstormCascadeGeneratorLabelModule',

    # settings for the label module
    'label_settings':{
        'shift_cascade_vertex': True,
        # logarithm on labels:
        # (x, y, z, zenith, azimuth, energy, time)?
        'trafo_log': [False, False, False, False, False, True, False],
        'label_key': 'LabelsDeepLearning',
        'additional_labels': [],
        'snowstorm_key': 'SnowstormParameters',
        'num_snowstorm_params': 6,
        'float_precision': 'float64',
    },

    # ---------------------
    # WeightModule Settings
    # ---------------------
    # which weight module to use
    'weight_module': 'dummy.DummyWeightModule',

    # settings for the weight module
    'weight_settings':{},

    # -------------------
    # MiscModule Settings
    # -------------------
    # which misc module to use
    'misc_module': 'dummy.DummyMiscModule',

    # settings for the misc module
    'misc_settings':{},

    # -------------------
    # FilterModule Settings
    # -------------------
    # which filter module to use
    'filter_module': 'general_filter.GeneralFilterModule',

    # settings for the filter module
    'filter_settings':{
        'constraints': [
            # # ['LabelsDeepLearning', 'cascade_z', '<', -250.],
            # ['SnowstormParameters', 3, '>=', -0.65],
            # ['SnowstormParameters', 3, '<=', 0.60],
            # ['SnowstormParameters', 4, '>=', -0.08],
            # ['SnowstormParameters', 4, '<=', 0.08],
        ],
    },
}

#---------------
# Model settings
#---------------

# Settings for the neural network model class
model_settings: {

    # The source class to use
    'model_class': 'egenerator.model.multi_source.independent.IndependentMultiSource',

    # configuration settings for DefaultMultiCascadeModel object
    config: {
        'sources': {
            'noise': 'noise',
            'cascade': 'cascade',
        },
    },

    # Base sources used by the multi-source class
    multi_source_bases: {

        noise: {
            # The noise source model class to use
            'model_class': 'egenerator.model.source.noise.default.DefaultNoiseModel',
            config: {'float_precision': float64},
        },

        cascade: {
            # The cascade source model class to use
            'model_class': 'egenerator.model.source.cascade.default.DefaultCascadeModel',

            config: {
                'keep_prob':,
                'add_opening_angle': True,
                'add_dom_coordinates': False,
                'num_local_vars': 0,
                'scale_charge': True,
                'scale_charge_by_relative_dom_efficiency': True,
                'scale_charge_by_global_dom_efficiency': True,
                'prevent_mixture_component_swapping': False,
                'estimate_charge_distribution': 'negative_binomial',
                'num_latent_models': 10,
                'float_precision': float64,

                # This is a list of labels in addition to
                # (x, y, z, zenith, azimuth, energy, time) and snowstorm parameters
                'additional_label_names' : [
                ],

                # This is a list of the orderd snowstorm parameters: (name, number)
                'snowstorm_parameter_names': [
                    ['Absorption', 1],
                    ['AnisotropyScale', 1],
                    ['DOMEfficiency', 1],
                    ['HoleIceForward_Unified_{:02d}', 2],
                    # ['IceWavePlusModes_{:02d}', 24],
                    ['Scattering', 1],
                ],

                # First convolutions
                'filter_size_list' : [[1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1]],
                'num_filters_list' : [25, 100, 100, 100, 42],
                'method_list' : ['locally_connected',
                                 'convolution', 'convolution', 'convolution',
                                 'convolution',
                                 ],
                'use_dropout_list' : False,
                'activation_list' : ['elu', 'elu', 'elu', 'elu', ''],
                'use_batch_norm_list' : False,
                'use_residual_list' : True,
            },
        },
    },
}

#----------------------
...
